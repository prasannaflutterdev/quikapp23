---
description:
globs:
alwaysApply: false
---
rule: Use App Store Connect API for iOS workflow validation
when:
  - file: codemagic.yaml
    contains: "app_store_connect"
    message: |
      Modern iOS workflows should use the App Store Connect API for validation and deployment.
      Please ensure your workflow uses the `app_store_connect` block with `api_key` credentials as recommended by Apple.
      Example:
        publishing:
          app_store_connect:
            api_key:
              key_id: $APP_STORE_CONNECT_KEY_ID
              issuer_id: $APP_STORE_CONNECT_ISSUER_ID
              private_key: $APP_STORE_CONNECT_PRIVATE_KEY
            submit_to_testflight: true
            submit_to_app_store: false
      See: https://docs.codemagic.io/publishing-yaml/distribution/#publishing-to-app-store-connect-using-api-key
severity: error
requirement: |
  To use the App Store Connect API for code signing, exporting IPA, and uploading to TestFlight, ensure the following:
    - You have generated an App Store Connect API key with the necessary permissions (Access to Certificates, Identifiers & Profiles, and App Manager).
    - The API key, key ID, and issuer ID are securely stored (e.g., as environment variables or in Codemagic's encrypted variables).
    - Your workflow includes the `app_store_connect` block with the `api_key` credentials.
    - Xcode project is properly configured for automatic code signing.

usage: |
  Example Codemagic YAML configuration for iOS workflows using App Store Connect API:

    publishing:
      app_store_connect:
        api_key:
          key_id: $APP_STORE_CONNECT_KEY_ID
          issuer_id: $APP_STORE_CONNECT_ISSUER_ID
          private_key: $APP_STORE_CONNECT_PRIVATE_KEY
        submit_to_testflight: true
        submit_to_app_store: false

  This configuration will:
    - Use the App Store Connect API for code signing and exporting the IPA.
    - Upload the generated IPA to TestFlight automatically.

  For more details, see: https://docs.codemagic.io/publishing-yaml/distribution/#publishing-to-app-store-connect-using-api-key
  # Rule: Centralize iOS Workflow Scripts

  description: |
    All scripts required for the iOS workflow must be located under the `lib/scripts/ios-workflow` directory.
    This ensures maintainability, discoverability, and consistency across iOS build and deployment processes.

  requirement: |
    - All shell, Python, or utility scripts invoked by the iOS workflow (e.g., build, code signing, certificate handling, email notifications, environment setup, validation, etc.) must be present in `lib/scripts/ios-workflow/`.
    - If scripts currently exist elsewhere (e.g., `lib/scripts/ios/` or `lib/scripts/utils/`), copy or refactor them into `lib/scripts/ios-workflow/`.
    - Update all workflow references (in YAML, shell scripts, or CI/CD configs) to use the new path.
    - Remove or deprecate the old script locations after migration.

  usage: |
    Example migration steps:
      1. Move or copy all required scripts to `lib/scripts/ios-workflow/`.
         For example:
           mv lib/scripts/ios/main.sh lib/scripts/ios-workflow/main.sh
           mv lib/scripts/ios/email_notifications.sh lib/scripts/ios-workflow/email_notifications.sh
           mv lib/scripts/utils/send_email.py lib/scripts/ios-workflow/send_email.py
      2. Update all references in your workflow files:
           - codemagic.yaml
           - Any shell scripts that call these scripts
           - Documentation
      3. Test the workflow to ensure all scripts are correctly referenced and functional.
      4. Remove the old script files from their previous locations to avoid confusion.

    Benefits:
      - All iOS workflow scripts are organized in a single directory.
      - Easier onboarding for new developers and maintainers.
      - Reduces risk of missing or outdated scripts during workflow changes.

  severity: warning

  message: |
    All scripts required for the iOS workflow should be present under `lib/scripts/ios-workflow/`.
    Please move, copy, or recreate any necessary scripts into this directory and update all references accordingly.
    // ‚ö†Ô∏è Do NOT hardcode workflow variables for ios-workflow!
    //
    // Codemagic automatically injects all required variables (such as APP_NAME, VERSION_NAME, EMAIL_ID, BUNDLE_ID, APPLE_TEAM_ID, PROFILE_TYPE, API keys, etc.)
    // into the workflow environment at runtime.
    //
    // Best Practices:
    // - Always reference variables using environment variable syntax (e.g., $APP_NAME, $EMAIL_ID, $BUNDLE_ID) in your scripts and YAML.
    // - Do NOT copy-paste or hardcode values for these variables in scripts, YAML, or code.
    // - If you need to use a variable in a shell script, use: "$VARIABLE_NAME" (e.g., "$APP_NAME")
    // - If you need to use a variable in Python, use: os.environ.get("VARIABLE_NAME")
    //
    // Example (shell):
    //   echo "Building $APP_NAME version $VERSION_NAME for bundle $BUNDLE_ID"
    //
    // Example (Python):
    //   import os
    //   app_name = os.environ.get("APP_NAME")
    //
    // This ensures your workflow is portable, secure, and always uses the latest values provided by Codemagic.
    //
    // If you need a full list of available variables, refer to the Codemagic documentation or print the environment in your workflow:
    //   - In shell: env | sort
    //   - In Python: import os; print(dict(os.environ))
    //
    // üöÄ Codemagic iOS Workflow Setup Prompt (Best Practices)
    //
    // To define a robust ios-workflow in your codemagic.yaml, follow this structure:
    //
    // workflows:
    //   ios-workflow:
    //     name: Build iOS App using Dynamic Config
    //     environment:
    //       flutter: stable
    //       xcode: latest
    //       vars:
    //         APP_NAME: $APP_NAME
    //         BUNDLE_ID: $BUNDLE_ID
    //         VERSION_NAME: $VERSION_NAME
    //         VERSION_CODE: $VERSION_CODE
    //         FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS
    //         EMAIL_ID: $EMAIL_ID
    //       groups:
    //         - credential_env_group # load credentials including SMTP & Apple keys
    //
    //     cache:
    //       cache_paths:
    //         - "$HOME/Library/Caches/CocoaPods"
    //
    //     scripts:
    //       - name: üîç Validate Required Environment Vars
    //         script: |
    //           ./lib/scripts/ios-workflow/validate_env.sh
    //
    //       - name: ‚¨áÔ∏è Download Assets (icons, splash, certificates)
    //         script: |
    //           ./lib/scripts/ios-workflow/download_assets.sh
    //
    //       - name: üé® Change App Name and Icons
    //         script: |
    //           ./lib/scripts/ios-workflow/change_app_name.sh "$APP_NAME"
    //           ./lib/scripts/ios-workflow/change_app_icon.sh "$LOGO_URL"
    //
    //       - name: üéØ Update Bundle ID and Versioning
    //         script: |
    //           ./lib/scripts/ios-workflow/update_bundle_id.sh "$BUNDLE_ID"
    //           ./lib/scripts/ios-workflow/set_version.sh "$VERSION_NAME" "$VERSION_CODE"
    //
    //       - name: ‚öôÔ∏è Inject Permissions and Features
    //         script: |
    //           ./lib/scripts/ios-workflow/configure_permissions.sh
    //
    //       - name: üöÄ Generate Env Configs (env_config.dart, Info.plist, etc)
    //         script: |
    //           ./lib/scripts/ios-workflow/gen_env_config.sh
    //
    //       - name: üß™ Run Flutter Tests
    //         script: |
    //           flutter test
    //
    //       - name: üèóÔ∏è Build and Archive iOS (.ipa)
    //         script: |
    //           flutter build ios --release --no-codesign
    //           xcodebuild \
    //             -workspace ios/Runner.xcworkspace \
    //             -scheme Runner \
    //             -sdk iphoneos \
    //             -configuration Release archive \
    //             -archivePath build/Runner.xcarchive \
    //             DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
    //             PRODUCT_BUNDLE_IDENTIFIER=$BUNDLE_ID
    //
    //       - name: üì¶ Export IPA
    //         script: |
    //           xcodebuild -exportArchive \
    //             -archivePath build/Runner.xcarchive \
    //             -exportOptionsPlist ./lib/scripts/ios-workflow/exportOptions.plist \
    //             -exportPath build/export \
    //             -allowProvisioningUpdates
    //
    //       - name: ‚¨ÜÔ∏è Upload to TestFlight (optional)
    //         script: |
    //           if [ "$IS_TESTFLIGHT" == "true" ]; then
    //             xcrun altool --upload-app \
    //               --type ios \
    //               --file build/export/Runner.ipa \
    //               --apiKey "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
    //               --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID"
    //           fi
    //
    //       - name: ‚úâÔ∏è Email Notification
    //         script: |
    //           ./lib/scripts/ios-workflow/send_email_notification.sh "$EMAIL_ID" "$WORKFLOW_ID" "success"
    //
    //     artifacts:
    //       - build/export/*.ipa
    //       - flutter_drive.log
    //
    // üìÅ Required scripts (place in lib/scripts/ios-workflow/):
    //   - validate_env.sh
    //   - download_assets.sh
    //   - change_app_name.sh
    //   - change_app_icon.sh
    //   - update_bundle_id.sh
    //   - set_version.sh
    //   - configure_permissions.sh
    //   - gen_env_config.sh
    //   - send_email_notification.sh
    //   - mailer.py
    //   - exportOptions.plist (for xcodebuild export)
    //
    // üîë All scripts must use environment variables (never hardcode values).
    //    Use "$VARIABLE" in shell, os.environ.get("VARIABLE") in Python.
    //
    // üõ°Ô∏è Store all secrets (SMTP, Apple API, etc) in Codemagic environment groups.
    //
    // üìù Make all scripts executable: chmod +x lib/scripts/ios-workflow/*.sh
    //
    // For more details, see the full prompt above or Codemagic documentation.
