#!/bin/bash
# 🧪 Test JSON Fix for Dart Syntax Error
# Tests the JSON handling fix to prevent "Can't find ']' to match '['" error

set -euo pipefail

# Enhanced logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] [TEST_JSON] $1"; }
log_success() { echo -e "\033[0;32m✅ $1\033[0m"; }
log_warning() { echo -e "\033[1;33m⚠️ $1\033[0m"; }
log_error() { echo -e "\033[0;31m❌ $1\033[0m"; }
log_info() { echo -e "\033[0;34m🔍 $1\033[0m"; }

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
cd "$PROJECT_ROOT"

log_info "🧪 Testing JSON Fix for Dart Syntax Error"
log "================================================"

# Test 1: Define the clean_json_for_dart function
log_info "Test 1: Defining clean_json_for_dart function..."

clean_json_for_dart() {
    local json_string="$1"
    # Remove emoji and non-ASCII characters using macOS-compatible approach
    local cleaned=$(echo "$json_string" | LC_ALL=C sed 's/[^[:print:][:space:]]//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '\r\n\t')
    # Escape quotes for Dart string literals
    echo "$cleaned" | sed 's/"/\\"/g'
}

log_success "clean_json_for_dart function defined"

# Test 2: Test with complex JSON containing quotes and special characters
log_info "Test 2: Testing with complex JSON containing quotes and special characters..."

# Test cases with complex JSON
TEST_JSON_CASES=(
    '[{"label":"Home","icon":{"type":"preset","name":"home_outlined"},"url":"https://example.com/"},{"label":"About","icon":{"type":"custom","icon_url":"https://example.com/about.svg","icon_size":"24"},"url":"https://example.com/about"}]'
    '[{"label":"Products","icon":{"type":"custom","icon_url":"https://example.com/products.svg","icon_size":"24"},"url":"https://example.com/products"},{"label":"Contact","icon":{"type":"preset","name":"contact_mail"},"url":"https://example.com/contact"}]'
    '[{"label":"Settings","icon":{"type":"preset","name":"settings"},"url":"https://example.com/settings"}]'
    '[]'
    '[{"label":"Test","icon":{"type":"custom","icon_url":"https://example.com/test.svg","icon_size":"24"},"url":"https://example.com/test"}]'
)

for test_case in "${TEST_JSON_CASES[@]}"; do
    log_info "Testing JSON: '$test_case'"
    cleaned_json=$(clean_json_for_dart "$test_case")
    log_info "Cleaned JSON: '$cleaned_json'"
    
    # Check if the cleaned JSON is valid for Dart
    if echo "$cleaned_json" | grep -q '^\[.*\]$'; then
        log_success "JSON structure preserved"
    else
        log_error "JSON structure corrupted"
        exit 1
    fi
    
    # Check for unescaped quotes that would cause Dart syntax errors
    if echo "$cleaned_json" | grep -q '"[^\\]*"[^\\]*"'; then
        log_error "Unescaped quotes found in JSON"
        exit 1
    else
        log_success "Quotes properly escaped"
    fi
done

# Test 3: Test with JSON containing emoji and non-ASCII characters
log_info "Test 3: Testing with JSON containing emoji and non-ASCII characters..."

EMOJI_JSON='[{"label":"✅ Home","icon":{"type":"preset","name":"home_outlined"},"url":"https://example.com/"},{"label":"🔍 About","icon":{"type":"custom","icon_url":"https://example.com/about.svg","icon_size":"24"},"url":"https://example.com/about"}]'

log_info "Original JSON with emoji: $EMOJI_JSON"
cleaned_emoji_json=$(clean_json_for_dart "$EMOJI_JSON")
log_info "Cleaned JSON: $cleaned_emoji_json"

    # Check if emoji characters were removed
    if echo "$cleaned_emoji_json" | LC_ALL=C grep -q '[^[:print:][:space:]]'; then
        log_error "Emoji characters still present in cleaned JSON"
        exit 1
    else
        log_success "Emoji characters successfully removed"
    fi

# Test 4: Generate test env_config.dart file
log_info "Test 4: Generating test env_config.dart file..."

# Create config directory
mkdir -p lib/config

# Generate the env_config.dart file
cat > lib/config/env_config.dart <<'EOF'
// Generated by Test JSON Fix Script
// Do not edit manually

class EnvConfig {
  // App Information
EOF

# Add test variables
printf "  static const String appName = %s;\n" "$(printf '%q' "Test App")" >> lib/config/env_config.dart
printf "  static const String versionName = %s;\n" "$(printf '%q' "1.0.0")" >> lib/config/env_config.dart
printf "  static const String bundleId = %s;\n" "$(printf '%q' "com.test.app")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF

  // Feature Flags
  static const bool isPushNotify = true;
  static const bool isChatbot = true;
  static const bool isSplash = true;

  // Permissions
  static const bool isCamera = false;
  static const bool isMic = true;
  static const bool isNotification = true;
  static const bool isStorage = true;

  // UI Configuration
EOF

printf "  static const String splashBgColor = %s;\n" "$(printf '%q' "#cbdbf5")" >> lib/config/env_config.dart
printf "  static const String splashTagline = %s;\n" "$(printf '%q' "TEST APP")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF

  // Bottom Menu Configuration
EOF

# Test with the complex JSON
TEST_BOTTOM_MENU_ITEMS='[{"label":"Home","icon":{"type":"preset","name":"home_outlined"},"url":"https://example.com/"},{"label":"About","icon":{"type":"custom","icon_url":"https://example.com/about.svg","icon_size":"24"},"url":"https://example.com/about"}]'
cleaned_bottom_menu=$(clean_json_for_dart "$TEST_BOTTOM_MENU_ITEMS")

printf "  static const String bottomMenuItems = \"%s\";\n" "$cleaned_bottom_menu" >> lib/config/env_config.dart
printf "  static const String bottomMenuBgColor = %s;\n" "$(printf '%q' "#FFFFFF")" >> lib/config/env_config.dart
printf "  static const String bottomMenuIconColor = %s;\n" "$(printf '%q' "#6d6e8c")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF
  static const bool bottomMenuFontBold = false;
  static const bool bottomMenuFontItalic = false;
EOF

printf "  static const String bottomMenuActiveTabColor = %s;\n" "$(printf '%q' "#a30237")" >> lib/config/env_config.dart
printf "  static const String bottomMenuIconPosition = %s;\n" "$(printf '%q' "above")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF
}
EOF

log_success "Test env_config.dart generated"

# Test 5: Validate the generated Dart file
log_info "Test 5: Validating generated Dart file..."

if [ -f "lib/config/env_config.dart" ]; then
    log_success "env_config.dart file created"
    
    # Check for emoji characters in the file
    if LC_ALL=C grep -q '[^[:print:][:space:]]' lib/config/env_config.dart; then
        log_error "Emoji characters found in generated Dart file"
        echo "File contents:"
        cat lib/config/env_config.dart
        exit 1
    else
        log_success "No emoji characters in generated Dart file"
    fi
    
    # Check for valid Dart syntax
    if grep -q "static const String bottomMenuItems" lib/config/env_config.dart; then
        log_success "Valid Dart syntax found for bottomMenuItems"
    else
        log_error "Invalid Dart syntax in generated file"
        exit 1
    fi
    
    # Check for proper JSON string formatting
    if grep -q 'static const String bottomMenuItems = "' lib/config/env_config.dart; then
        log_success "Proper JSON string formatting found"
    else
        log_error "Improper JSON string formatting"
        exit 1
    fi
else
    log_error "env_config.dart file not created"
    exit 1
fi

# Test 6: Show the generated file
log_info "Test 6: Showing generated file..."
echo "Generated env_config.dart:"
cat lib/config/env_config.dart

# Test 7: Test Dart syntax validation (simulation)
log_info "Test 7: Testing Dart syntax validation..."

# Check for common Dart syntax issues
if grep -q '\[.*\[.*\].*\].*\[.*\].*\]' lib/config/env_config.dart; then
    log_error "Potential bracket mismatch found"
    exit 1
else
    log_success "No bracket mismatch detected"
fi

# Check for unescaped quotes in JSON strings
if grep -q '"[^"]*"[^"]*"' lib/config/env_config.dart; then
    log_error "Potential unescaped quotes found"
    exit 1
else
    log_success "No unescaped quotes detected"
fi

log_success "🎉 JSON fix test completed!"
log_info "The JSON handling fix is working correctly"
log_info "Key improvements:"
log_info "  - Proper JSON string escaping for Dart"
log_info "  - Emoji and non-ASCII character removal"
log_info "  - Valid Dart syntax generation"
log_info "  - Prevents 'Can't find ']' to match '[' error" 