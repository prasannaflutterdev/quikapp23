#!/bin/bash
# 🧪 Test Emoji Cleaning Function
# Tests the clean_env_var function to ensure emoji characters are removed

set -euo pipefail

# Enhanced logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] [TEST_EMOJI] $1"; }
log_success() { echo -e "\033[0;32m✅ $1\033[0m"; }
log_warning() { echo -e "\033[1;33m⚠️ $1\033[0m"; }
log_error() { echo -e "\033[0;31m❌ $1\033[0m"; }
log_info() { echo -e "\033[0;34m🔍 $1\033[0m"; }

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
cd "$PROJECT_ROOT"

log_info "🧪 Testing Emoji Cleaning Function"
log "================================================"

# Test 1: Define the clean_env_var function
log_info "Test 1: Defining clean_env_var function..."

clean_env_var() {
    local var_value="$1"
    # Remove emoji and non-ASCII characters, and trim whitespace
    echo "$var_value" | sed 's/[^\x00-\x7F]//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '\r\n\t'
}

log_success "clean_env_var function defined"

# Test 2: Test with emoji characters
log_info "Test 2: Testing with emoji characters..."

# Test cases with emoji
TEST_CASES=(
    "✅ Found LOGO_URL: https://example.com/logo.png"
    "🔍 Downloading app logo from: https://example.com/logo.png"
    "⚠️ Warning: Download failed"
    "❌ Error: Network timeout"
    "🚀 Starting build process..."
    "📱 App Name: My App ✅"
    "🎨 Color: #FF5733 🔥"
    "📋 Menu: [{\"label\":\"Home\",\"icon\":\"🏠\"}]"
)

for test_case in "${TEST_CASES[@]}"; do
    log_info "Testing: '$test_case'"
    cleaned=$(clean_env_var "$test_case")
    log_info "Cleaned: '$cleaned'"
    
    # Check if any emoji characters remain
    if echo "$cleaned" | grep -q '[^\x00-\x7F]'; then
        log_error "Emoji characters still present in cleaned string"
        exit 1
    else
        log_success "Emoji characters successfully removed"
    fi
done

# Test 3: Test with normal text (should remain unchanged)
log_info "Test 3: Testing with normal text..."

NORMAL_CASES=(
    "Found LOGO_URL: https://example.com/logo.png"
    "Downloading app logo from: https://example.com/logo.png"
    "Warning: Download failed"
    "Error: Network timeout"
    "Starting build process..."
    "App Name: My App"
    "Color: #FF5733"
    "Menu: [{\"label\":\"Home\",\"icon\":\"home\"}]"
)

for test_case in "${NORMAL_CASES[@]}"; do
    log_info "Testing: '$test_case'"
    cleaned=$(clean_env_var "$test_case")
    log_info "Cleaned: '$cleaned'"
    
    if [ "$cleaned" = "$test_case" ]; then
        log_success "Normal text unchanged (correct)"
    else
        log_warning "Normal text changed: '$test_case' -> '$cleaned'"
    fi
done

# Test 4: Test with complex JSON containing emoji
log_info "Test 4: Testing with complex JSON containing emoji..."

COMPLEX_JSON='[{"label":"Home","icon":{"type":"preset","name":"home_outlined"},"url":"https://example.com/"},{"label":"New Arrivals","icon":{"type":"custom","icon_url":"https://example.com/card.svg","icon_size":"24"},"url":"https://example.com/collections/new-arrivals"}]'

log_info "Original JSON: $COMPLEX_JSON"
cleaned_json=$(clean_env_var "$COMPLEX_JSON")
log_info "Cleaned JSON: $cleaned_json"

# Check if JSON structure is preserved
if echo "$cleaned_json" | grep -q '^\[.*\]$'; then
    log_success "JSON structure preserved"
else
    log_error "JSON structure corrupted"
    exit 1
fi

# Test 5: Test Dart code generation
log_info "Test 5: Testing Dart code generation..."

# Create a test env_config.dart file
mkdir -p lib/config

cat > lib/config/env_config.dart <<'EOF'
// Generated by Test Emoji Cleaning Script
// Do not edit manually

class EnvConfig {
  // App Information
EOF

# Test with a variable that might contain emoji
TEST_VAR="✅ Found LOGO_URL: https://example.com/logo.png 🔍"
cleaned_var=$(clean_env_var "$TEST_VAR")

printf "  static const String testVar = %s;\n" "$(printf '%q' "$cleaned_var")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF
}
EOF

log_success "Test env_config.dart generated"

# Test 6: Validate the generated Dart file
log_info "Test 6: Validating generated Dart file..."

if [ -f "lib/config/env_config.dart" ]; then
    log_success "env_config.dart file created"
    
    # Check for emoji characters in the file
    if grep -q '[^\x00-\x7F]' lib/config/env_config.dart; then
        log_error "Emoji characters found in generated Dart file"
        echo "File contents:"
        cat lib/config/env_config.dart
        exit 1
    else
        log_success "No emoji characters in generated Dart file"
    fi
    
    # Check for valid Dart syntax
    if grep -q "static const String testVar" lib/config/env_config.dart; then
        log_success "Valid Dart syntax found"
    else
        log_error "Invalid Dart syntax in generated file"
        exit 1
    fi
else
    log_error "env_config.dart file not created"
    exit 1
fi

# Test 7: Show the generated file
log_info "Test 7: Showing generated file..."
echo "Generated env_config.dart:"
cat lib/config/env_config.dart

log_success "🎉 Emoji cleaning test completed!"
log_info "The clean_env_var function is working correctly"
log_info "Key improvements:"
log_info "  - Removes emoji and non-ASCII characters"
log_info "  - Preserves normal text and JSON structure"
log_info "  - Generates valid Dart syntax"
log_info "  - Prevents compilation errors" 