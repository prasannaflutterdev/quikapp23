#!/bin/bash
# 🧪 Test EnvConfig Direct
# Tests the generate_env_config function directly

set -euo pipefail

# Enhanced logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] [TEST_ENV_DIRECT] $1"; }
log_success() { echo -e "\033[0;32m✅ $1\033[0m"; }
log_warning() { echo -e "\033[1;33m⚠️ $1\033[0m"; }
log_error() { echo -e "\033[0;31m❌ $1\033[0m"; }
log_info() { echo -e "\033[0;34m🔍 $1\033[0m"; }

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
cd "$PROJECT_ROOT"

log_info "🧪 Testing EnvConfig Generation Directly"
log "================================================"

# Set test environment variables
export WORKFLOW_ID="ios-workflow"
export APP_NAME="Test App"
export BUNDLE_ID="com.test.app"
export VERSION_NAME="1.0.0"
export VERSION_CODE="1"
export PKG_NAME="com.test.app"
export ORG_NAME="Test Organization"
export WEB_URL="https://test.com"
export USER_NAME="testuser"
export APP_ID="12345"
export PUSH_NOTIFY="true"
export IS_CHATBOT="true"
export IS_DOMAIN_URL="true"
export IS_SPLASH="true"
export IS_PULLDOWN="true"
export IS_BOTTOMMENU="true"
export IS_LOAD_IND="true"
export IS_CAMERA="false"
export IS_LOCATION="false"
export IS_MIC="true"
export IS_NOTIFICATION="true"
export IS_CONTACT="false"
export IS_BIOMETRIC="false"
export IS_CALENDAR="false"
export IS_STORAGE="true"
export LOGO_URL="https://example.com/logo.png"
export SPLASH_URL="https://example.com/splash.png"
export SPLASH_BG_URL="https://example.com/splash_bg.png"
export SPLASH_BG_COLOR="#cbdbf5"
export SPLASH_TAGLINE="TEST APP"
export SPLASH_TAGLINE_COLOR="#a30237"
export SPLASH_ANIMATION="zoom"
export SPLASH_DURATION="4"
export BOTTOMMENU_ITEMS='[{"label":"Home","icon":{"type":"preset","name":"home_outlined"},"url":"https://example.com/"}]'
export BOTTOMMENU_BG_COLOR="#FFFFFF"
export BOTTOMMENU_ICON_COLOR="#6d6e8c"
export BOTTOMMENU_TEXT_COLOR="#6d6e8c"
export BOTTOMMENU_FONT="DM Sans"
export BOTTOMMENU_FONT_SIZE="12"
export BOTTOMMENU_FONT_BOLD="false"
export BOTTOMMENU_FONT_ITALIC="false"
export BOTTOMMENU_ACTIVE_TAB_COLOR="#a30237"
export BOTTOMMENU_ICON_POSITION="above"
export FIREBASE_CONFIG_IOS="https://example.com/firebase.plist"

log_info "Test environment variables set"

# Copy the clean_env_var function from the workflow script
clean_env_var() {
    local var_value="$1"
    # Remove emoji and non-ASCII characters using macOS-compatible approach
    echo "$var_value" | LC_ALL=C sed 's/[^[:print:][:space:]]//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '\r\n\t'
}

# Copy the clean_json_for_dart function from the workflow script
clean_json_for_dart() {
    local json_string="$1"
    # Remove emoji and non-ASCII characters using macOS-compatible approach
    local cleaned=$(echo "$json_string" | LC_ALL=C sed 's/[^[:print:][:space:]]//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '\r\n\t')
    # Escape quotes for Dart string literals
    echo "$cleaned" | sed 's/"/\\"/g'
}

# Copy the generate_env_config function from the workflow script
generate_env_config() {
    echo "🔍 Generating env_config.dart..."
    
    # Create config directory
    mkdir -p lib/config
    
    # Generate the env_config.dart file using a safer approach
    cat > lib/config/env_config.dart <<'EOF'
// Generated by Test EnvConfig Direct Script
// Do not edit manually

class EnvConfig {
  // App Information
EOF

    # Add simple string variables with cleaned values
    printf "  static const String appName = \"%s\";\n" "$(clean_env_var "$APP_NAME")" >> lib/config/env_config.dart
    printf "  static const String versionName = \"%s\";\n" "$(clean_env_var "$VERSION_NAME")" >> lib/config/env_config.dart
    printf "  static const String versionCode = \"%s\";\n" "$(clean_env_var "$VERSION_CODE")" >> lib/config/env_config.dart
    printf "  static const String bundleId = \"%s\";\n" "$(clean_env_var "$BUNDLE_ID")" >> lib/config/env_config.dart
    printf "  static const String packageName = \"%s\";\n" "$(clean_env_var "${PKG_NAME:-$BUNDLE_ID}")" >> lib/config/env_config.dart
    printf "  static const String organizationName = \"%s\";\n" "$(clean_env_var "${ORG_NAME:-}")" >> lib/config/env_config.dart
    printf "  static const String webUrl = \"%s\";\n" "$(clean_env_var "${WEB_URL:-}")" >> lib/config/env_config.dart
    printf "  static const String userName = \"%s\";\n" "$(clean_env_var "${USER_NAME:-}")" >> lib/config/env_config.dart
    printf "  static const String appId = \"%s\";\n" "$(clean_env_var "${APP_ID:-}")" >> lib/config/env_config.dart
    printf "  static const String workflowId = \"%s\";\n" "$(clean_env_var "${WORKFLOW_ID:-}")" >> lib/config/env_config.dart

    # Add boolean variables
    cat >> lib/config/env_config.dart <<EOF

  // Feature Flags
  static const bool pushNotify = ${PUSH_NOTIFY:-false};
  static const bool isChatbot = ${IS_CHATBOT:-false};
  static const bool isDomainUrl = ${IS_DOMAIN_URL:-false};
  static const bool isSplash = ${IS_SPLASH:-true};
  static const bool isPulldown = ${IS_PULLDOWN:-false};
  static const bool isBottommenu = ${IS_BOTTOMMENU:-false};
  static const bool isLoadIndicator = ${IS_LOAD_IND:-false};

  // Permissions
  static const bool isCamera = ${IS_CAMERA:-false};
  static const bool isLocation = ${IS_LOCATION:-false};
  static const bool isMic = ${IS_MIC:-false};
  static const bool isNotification = ${IS_NOTIFICATION:-false};
  static const bool isContact = ${IS_CONTACT:-false};
  static const bool isBiometric = ${IS_BIOMETRIC:-false};
  static const bool isCalendar = ${IS_CALENDAR:-false};
  static const bool isStorage = ${IS_STORAGE:-false};

  // UI Configuration
EOF

    # Add complex string variables using printf with cleaned values
    printf "  static const String splashBgColor = \"%s\";\n" "$(clean_env_var "${SPLASH_BG_COLOR:-#FFFFFF}")" >> lib/config/env_config.dart
    printf "  static const String splashTagline = \"%s\";\n" "$(clean_env_var "${SPLASH_TAGLINE:-}")" >> lib/config/env_config.dart
    printf "  static const String splashTaglineColor = \"%s\";\n" "$(clean_env_var "${SPLASH_TAGLINE_COLOR:-#000000}")" >> lib/config/env_config.dart
    printf "  static const String splashAnimation = \"%s\";\n" "$(clean_env_var "${SPLASH_ANIMATION:-fade}")" >> lib/config/env_config.dart
    printf "  static const String splashDuration = \"%s\";\n" "$(clean_env_var "${SPLASH_DURATION:-3}")" >> lib/config/env_config.dart

    # Add missing properties that are used in main.dart
    printf "  static const String splashUrl = \"%s\";\n" "$(clean_env_var "${SPLASH_URL:-}")" >> lib/config/env_config.dart
    printf "  static const String splashBg = \"%s\";\n" "$(clean_env_var "${SPLASH_BG_URL:-}")" >> lib/config/env_config.dart

    # Add bottom menu configuration
    cat >> lib/config/env_config.dart <<EOF

  // Bottom Menu Configuration
EOF

    # Handle JSON string specially to prevent Dart syntax errors
    local bottom_menu_items="${BOTTOMMENU_ITEMS:-[]}"
    # Clean and escape the JSON string properly for Dart
    local cleaned_json=$(clean_json_for_dart "$bottom_menu_items")
    printf "  static const String bottomMenuItems = \"%s\";\n" "$cleaned_json" >> lib/config/env_config.dart
    printf "  static const String bottomMenuBgColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_BG_COLOR:-#FFFFFF}")" >> lib/config/env_config.dart
    printf "  static const String bottomMenuIconColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_ICON_COLOR:-#666666}")" >> lib/config/env_config.dart
    printf "  static const String bottomMenuTextColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_TEXT_COLOR:-#666666}")" >> lib/config/env_config.dart
    printf "  static const String bottomMenuFont = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_FONT:-Roboto}")" >> lib/config/env_config.dart
    printf "  static const String bottomMenuFontSize = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_FONT_SIZE:-12}")" >> lib/config/env_config.dart

    cat >> lib/config/env_config.dart <<EOF
  static const bool bottomMenuFontBold = ${BOTTOMMENU_FONT_BOLD:-false};
  static const bool bottomMenuFontItalic = ${BOTTOMMENU_FONT_ITALIC:-false};
EOF

    printf "  static const String bottomMenuActiveTabColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_ACTIVE_TAB_COLOR:-#007AFF}")" >> lib/config/env_config.dart
    printf "  static const String bottomMenuIconPosition = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_ICON_POSITION:-above}")" >> lib/config/env_config.dart

    # Add missing properties with different names used in main.dart
    printf "  static const String bottommenuItems = \"%s\";\n" "$cleaned_json" >> lib/config/env_config.dart
    printf "  static const String bottommenuBgColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_BG_COLOR:-#FFFFFF}")" >> lib/config/env_config.dart
    printf "  static const String bottommenuActiveTabColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_ACTIVE_TAB_COLOR:-#007AFF}")" >> lib/config/env_config.dart
    printf "  static const String bottommenuTextColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_TEXT_COLOR:-#666666}")" >> lib/config/env_config.dart
    printf "  static const String bottommenuIconColor = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_ICON_COLOR:-#666666}")" >> lib/config/env_config.dart
    printf "  static const String bottommenuIconPosition = \"%s\";\n" "$(clean_env_var "${BOTTOMMENU_ICON_POSITION:-above}")" >> lib/config/env_config.dart

    cat >> lib/config/env_config.dart <<EOF
}
EOF

    echo "✅ env_config.dart generated successfully"
}

# Test the generate_env_config function
log_info "Testing generate_env_config function..."

# Backup existing env_config.dart if it exists
if [ -f "lib/config/env_config.dart" ]; then
    cp lib/config/env_config.dart lib/config/env_config.dart.backup
    log_info "Backed up existing env_config.dart"
fi

# Run the generate_env_config function
generate_env_config

# Check if the file was generated
if [ -f "lib/config/env_config.dart" ]; then
    log_success "env_config.dart generated successfully"
else
    log_error "env_config.dart was not generated"
    exit 1
fi

# Show the generated file
log_info "Generated env_config.dart content:"
echo "================================================"
cat lib/config/env_config.dart
echo "================================================"

# Test the generated file with our test script
log_info "Testing generated env_config.dart..."

if bash lib/scripts/ios-workflow/test_env_config_properties.sh; then
    log_success "All required properties are present in generated file"
else
    log_error "Some required properties are missing"
fi

# Restore backup if it existed
if [ -f "lib/config/env_config.dart.backup" ]; then
    mv lib/config/env_config.dart.backup lib/config/env_config.dart
    log_info "Restored original env_config.dart"
fi

log_success "🎉 Generate EnvConfig direct test completed!"
log_info "The generate_env_config function is working correctly" 