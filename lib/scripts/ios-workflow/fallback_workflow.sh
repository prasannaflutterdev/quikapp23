#!/bin/bash
# Fallback iOS workflow that works even with network issues

set -euo pipefail

# Source environment loader
source "$(dirname "$0")/env_loader.sh"

# Load environment variables
set_defaults

# Create default assets
create_default_assets() {
    echo "Creating default assets for build..."
    
    # Ensure default assets exist
    if [ ! -f "assets/images/default_logo.png" ]; then
        echo "Creating default logo..."
        if command -v convert >/dev/null 2>&1; then
            convert -size 512x512 xc:"#007AFF" -fill white -draw "text 256,256 'Q'" assets/images/default_logo.png
        fi
    fi
    
    if [ ! -f "assets/images/splash.png" ]; then
        echo "Creating default splash..."
        if command -v convert >/dev/null 2>&1; then
            convert -size 1125x2436 xc:"#FFFFFF" -fill "#007AFF" -draw "text 562,1218 'QuikApp'" assets/images/splash.png
        fi
    fi
}

# Generate env_config.dart
generate_env_config() {
    echo "Generating env_config.dart..."
    
    cat > lib/config/env_config.dart <<ENVEOF
// Generated by Fallback iOS Workflow
// Do not edit manually

class EnvConfig {
  // App Information
  static const String appName = '$APP_NAME';
  static const String versionName = '$VERSION_NAME';
  static const String versionCode = '$VERSION_CODE';
  static const String bundleId = '$BUNDLE_ID';
  
  // Feature Flags
  static const bool isPushNotify = $PUSH_NOTIFY;
  static const bool isCamera = $IS_CAMERA;
  static const bool isLocation = $IS_LOCATION;
  static const bool isMic = $IS_MIC;
  static const bool isNotification = $IS_NOTIFICATION;
  static const bool isContact = $IS_CONTACT;
  static const bool isBiometric = $IS_BIOMETRIC;
  static const bool isCalendar = $IS_CALENDAR;
  static const bool isStorage = $IS_STORAGE;
  
  // UI Configuration
  static const String splashBgColor = '$SPLASH_BG_COLOR';
}
ENVEOF
    
    echo "✅ env_config.dart generated"
}

# Build without external dependencies
build_without_externals() {
    echo "Building without external dependencies..."
    
    # Clean and get dependencies
    flutter clean
    flutter pub get
    
    # Build without code signing
    if flutter build ios --release --no-codesign; then
        echo "✅ Flutter build completed"
    else
        echo "❌ Flutter build failed"
        return 1
    fi
    
    # Try to create archive with automatic signing
    cd ios
    pod install || echo "⚠️ CocoaPods install failed, continuing anyway"
    cd ..
    
    if xcodebuild -workspace ios/Runner.xcworkspace \
        -scheme Runner \
        -sdk iphoneos \
        -configuration Release archive \
        -archivePath build/Runner.xcarchive \
        DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
        PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
        CODE_SIGN_STYLE="Automatic"; then
        echo "✅ Xcode archive completed"
    else
        echo "❌ Xcode archive failed"
        return 1
    fi
}

# Main fallback workflow
main() {
    echo "🚀 Starting Fallback iOS Workflow"
    
    # Create default assets
    create_default_assets
    
    # Generate environment config
    generate_env_config
    
    # Build without external dependencies
    if build_without_externals; then
        echo "🎉 Fallback workflow completed successfully!"
        echo "📦 Archive available at: build/Runner.xcarchive"
    else
        echo "❌ Fallback workflow failed"
        exit 1
    fi
}

# Execute main function
main "$@"
