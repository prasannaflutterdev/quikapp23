#!/bin/bash
# 🧪 Test Dart Syntax Fix
# Tests the Dart syntax fix to ensure proper string formatting

set -euo pipefail

# Enhanced logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] [TEST_DART] $1"; }
log_success() { echo -e "\033[0;32m✅ $1\033[0m"; }
log_warning() { echo -e "\033[1;33m⚠️ $1\033[0m"; }
log_error() { echo -e "\033[0;31m❌ $1\033[0m"; }
log_info() { echo -e "\033[0;34m🔍 $1\033[0m"; }

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../../.." && pwd)"
cd "$PROJECT_ROOT"

log_info "🧪 Testing Dart Syntax Fix"
log "================================================"

# Test 1: Define the functions
log_info "Test 1: Defining functions..."

clean_env_var() {
    local var_value="$1"
    # Remove emoji and non-ASCII characters, and trim whitespace
    echo "$var_value" | LC_ALL=C sed 's/[^[:print:][:space:]]//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '\r\n\t'
}

clean_json_for_dart() {
    local json_string="$1"
    # Remove emoji and non-ASCII characters using macOS-compatible approach
    local cleaned=$(echo "$json_string" | LC_ALL=C sed 's/[^[:print:][:space:]]//g' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -d '\r\n\t')
    # Escape quotes for Dart string literals
    echo "$cleaned" | sed 's/"/\\"/g'
}

log_success "Functions defined"

# Test 2: Set test environment variables
log_info "Test 2: Setting test environment variables..."

export APP_NAME="Test App"
export VERSION_NAME="1.0.0"
export VERSION_CODE="1"
export BUNDLE_ID="com.test.app"
export SPLASH_BG_COLOR="#cbdbf5"
export SPLASH_TAGLINE="TEST APP"
export SPLASH_TAGLINE_COLOR="#a30237"
export SPLASH_ANIMATION="zoom"
export SPLASH_DURATION="4"
export BOTTOMMENU_ITEMS='[{"label":"Home","icon":{"type":"preset","name":"home_outlined"},"url":"https://example.com/"},{"label":"About","icon":{"type":"custom","icon_url":"https://example.com/about.svg","icon_size":"24"},"url":"https://example.com/about"}]'
export BOTTOMMENU_BG_COLOR="#FFFFFF"
export BOTTOMMENU_ICON_COLOR="#6d6e8c"
export BOTTOMMENU_TEXT_COLOR="#6d6e8c"
export BOTTOMMENU_FONT="DM Sans"
export BOTTOMMENU_FONT_SIZE="12"
export BOTTOMMENU_ACTIVE_TAB_COLOR="#a30237"
export BOTTOMMENU_ICON_POSITION="above"

log_success "Test environment variables set"

# Test 3: Generate test env_config.dart
log_info "Test 3: Generating test env_config.dart..."

# Create config directory
mkdir -p lib/config

# Generate the env_config.dart file
cat > lib/config/env_config.dart <<'EOF'
// Generated by Test Dart Syntax Fix Script
// Do not edit manually

class EnvConfig {
  // App Information
EOF

# Add simple string variables with cleaned values
printf "  static const String appName = \"%s\";\n" "$(clean_env_var "$APP_NAME")" >> lib/config/env_config.dart
printf "  static const String versionName = \"%s\";\n" "$(clean_env_var "$VERSION_NAME")" >> lib/config/env_config.dart
printf "  static const String versionCode = \"%s\";\n" "$(clean_env_var "$VERSION_CODE")" >> lib/config/env_config.dart
printf "  static const String bundleId = \"%s\";\n" "$(clean_env_var "$BUNDLE_ID")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF

  // Feature Flags
  static const bool isPushNotify = true;
  static const bool isChatbot = true;
  static const bool isSplash = true;

  // Permissions
  static const bool isCamera = false;
  static const bool isMic = true;
  static const bool isNotification = true;
  static const bool isStorage = true;

  // UI Configuration
EOF

printf "  static const String splashBgColor = \"%s\";\n" "$(clean_env_var "$SPLASH_BG_COLOR")" >> lib/config/env_config.dart
printf "  static const String splashTagline = \"%s\";\n" "$(clean_env_var "$SPLASH_TAGLINE")" >> lib/config/env_config.dart
printf "  static const String splashTaglineColor = \"%s\";\n" "$(clean_env_var "$SPLASH_TAGLINE_COLOR")" >> lib/config/env_config.dart
printf "  static const String splashAnimation = \"%s\";\n" "$(clean_env_var "$SPLASH_ANIMATION")" >> lib/config/env_config.dart
printf "  static const String splashDuration = \"%s\";\n" "$(clean_env_var "$SPLASH_DURATION")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF

  // Bottom Menu Configuration
EOF

# Handle JSON string specially to prevent Dart syntax errors
bottom_menu_items="${BOTTOMMENU_ITEMS:-[]}"
# Clean and escape the JSON string properly for Dart
cleaned_json=$(clean_json_for_dart "$bottom_menu_items")
printf "  static const String bottomMenuItems = \"%s\";\n" "$cleaned_json" >> lib/config/env_config.dart

printf "  static const String bottomMenuBgColor = \"%s\";\n" "$(clean_env_var "$BOTTOMMENU_BG_COLOR")" >> lib/config/env_config.dart
printf "  static const String bottomMenuIconColor = \"%s\";\n" "$(clean_env_var "$BOTTOMMENU_ICON_COLOR")" >> lib/config/env_config.dart
printf "  static const String bottomMenuTextColor = \"%s\";\n" "$(clean_env_var "$BOTTOMMENU_TEXT_COLOR")" >> lib/config/env_config.dart
printf "  static const String bottomMenuFont = \"%s\";\n" "$(clean_env_var "$BOTTOMMENU_FONT")" >> lib/config/env_config.dart
printf "  static const String bottomMenuFontSize = \"%s\";\n" "$(clean_env_var "$BOTTOMMENU_FONT_SIZE")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF
  static const bool bottomMenuFontBold = false;
  static const bool bottomMenuFontItalic = false;
EOF

printf "  static const String bottomMenuActiveTabColor = \"%s\";\n" "$(clean_env_var "$BOTTOMMENU_ACTIVE_TAB_COLOR")" >> lib/config/env_config.dart
printf "  static const String bottomMenuIconPosition = \"%s\";\n" "$(clean_env_var "$BOTTOMMENU_ICON_POSITION")" >> lib/config/env_config.dart

cat >> lib/config/env_config.dart <<EOF
}
EOF

log_success "Test env_config.dart generated"

# Test 4: Validate the generated Dart file
log_info "Test 4: Validating generated Dart file..."

if [ -f "lib/config/env_config.dart" ]; then
    log_success "env_config.dart file created"
    
    # Check for proper string formatting
    if grep -q 'static const String appName = "' lib/config/env_config.dart; then
        log_success "Proper string formatting found for appName"
    else
        log_error "Improper string formatting for appName"
        exit 1
    fi
    
    # Check for proper JSON string formatting
    if grep -q 'static const String bottomMenuItems = "' lib/config/env_config.dart; then
        log_success "Proper JSON string formatting found"
    else
        log_error "Improper JSON string formatting"
        exit 1
    fi
    
    # Check for valid Dart syntax (proper JSON escaping)
    if grep -q '\\"' lib/config/env_config.dart; then
        log_success "Proper JSON escaping detected"
    else
        log_warning "No escaped quotes found (this might be normal for simple strings)"
    fi
    
    # Check for bracket balance
    open_brackets=$(grep -o '\[' lib/config/env_config.dart | wc -l)
    close_brackets=$(grep -o '\]' lib/config/env_config.dart | wc -l)
    
    if [ "$open_brackets" -eq "$close_brackets" ]; then
        log_success "Bracket balance is correct"
    else
        log_error "Bracket mismatch detected: $open_brackets open, $close_brackets close"
        exit 1
    fi
else
    log_error "env_config.dart file not created"
    exit 1
fi

# Test 5: Show the generated file
log_info "Test 5: Showing generated file..."
echo "Generated env_config.dart:"
cat lib/config/env_config.dart

log_success "🎉 Dart syntax fix test completed!"
log_info "The Dart syntax fix is working correctly"
log_info "Key improvements:"
log_info "  - Proper string literal formatting"
log_info "  - Correct JSON string escaping"
log_info "  - Valid Dart syntax"
log_info "  - Prevents 'Can't find ']' to match '[' error" 