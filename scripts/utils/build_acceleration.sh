#!/bin/bash
set -euo pipefail

# Build Acceleration Script for QuikApp
# This script implements various optimizations to reduce build times

log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] üöÄ $1"; }

# Source environment configuration
SCRIPT_DIR="$(dirname "$0")"
if [ -f "${SCRIPT_DIR}/../config/env.sh" ]; then
    source "${SCRIPT_DIR}/../config/env.sh"
    log "Environment configuration loaded from lib/config/env.sh"
elif [ -f "${SCRIPT_DIR}/../../lib/config/env.sh" ]; then
    source "${SCRIPT_DIR}/../../lib/config/env.sh"
    log "Environment configuration loaded from lib/config/env.sh"
else
    log "Environment configuration file not found, using system environment variables"
fi

# Initialize build acceleration
init_build_acceleration() {
    log "Initializing build acceleration..."
    
    # Set environment variables for faster builds
    export GRADLE_OPTS="${GRADLE_OPTS:-}"
    export XCODE_PARALLEL_JOBS="${XCODE_PARALLEL_JOBS:-6}"
    export FLUTTER_PUB_CACHE="${FLUTTER_PUB_CACHE:-true}"
    
    # Enable Gradle optimizations
    if [ "${GRADLE_DAEMON:-true}" = "true" ]; then
        export GRADLE_OPTS="$GRADLE_OPTS -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true"
        log "‚úÖ Gradle daemon and parallel processing enabled"
    fi
    
    # Enable Flutter pub cache
    if [ "${FLUTTER_PUB_CACHE:-true}" = "true" ]; then
        export PUB_CACHE_DIR="$HOME/.pub-cache"
        mkdir -p "$PUB_CACHE_DIR"
        log "‚úÖ Flutter pub cache enabled: $PUB_CACHE_DIR"
    fi
    
    log "‚úÖ Build acceleration initialized"
}

# Parallel asset download function
download_assets_parallel() {
    local assets=("$@")
    local max_parallel=4
    local pids=()
    local results=()
    
    log "üì• Downloading ${#assets[@]} assets in parallel (max: $max_parallel)..."
    
    for i in "${!assets[@]}"; do
        local asset="${assets[$i]}"
        local url="${asset%%|*}"
        local output="${asset#*|}"
        local name="${asset##*|}"
        
        # Download in background
        (
            if curl -L --fail --silent --show-error --output "$output" "$url"; then
                echo "‚úÖ $name downloaded successfully"
            else
                echo "‚ùå $name download failed"
                return 1
            fi
        ) &
        
        pids+=($!)
        results+=("$name")
        
        # Limit parallel downloads
        if [ ${#pids[@]} -ge $max_parallel ]; then
            wait "${pids[0]}"
            pids=("${pids[@]:1}")
        fi
    done
    
    # Wait for remaining downloads
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
    
    log "‚úÖ Parallel asset download completed"
}

# Optimize Gradle build
optimize_gradle_build() {
    log "‚ö° Optimizing Gradle build..."
    
    cd android
    
    # Generate gradlew if it doesn't exist
    if [ ! -f gradlew ]; then
        log "üîß Gradlew not found, generating wrapper..."
        if command -v gradle >/dev/null 2>&1; then
            gradle wrapper --gradle-version=8.0 2>/dev/null || true
        fi
        
        # If still not found, Flutter will generate it during build
        if [ ! -f gradlew ]; then
            log "üìù Gradlew will be generated by Flutter during build"
        fi
    fi
    
    # Ensure gradlew has execute permissions (if it exists)
    if [ -f gradlew ]; then
        chmod +x gradlew
        log "‚úÖ Gradlew permissions set"
    fi
    
    # Create optimized gradle.properties
    cat > gradle.properties <<EOF
# Gradle optimization settings
org.gradle.daemon=true
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.configureondemand=true
org.gradle.jvmargs=-Xmx8G -XX:MaxMetaspaceSize=2G -XX:ReservedCodeCacheSize=512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat

# Android optimization (updated for AGP 8.7.3)
android.useAndroidX=true
android.enableJetifier=true
android.enableR8.fullMode=true
# Removed deprecated options: android.enableBuildCache, android.enableD8.desugaring, android.enableD8.desugaring.artifacts

# Kotlin optimization
kotlin.incremental=true
kotlin.incremental.useClasspathSnapshot=true
kotlin.caching.enabled=true
kotlin.parallel.tasks.in.project=true

# Build optimization (disabled configuration cache due to Java module access issues)
# org.gradle.unsafe.configuration-cache=true
# org.gradle.unsafe.configuration-cache-problems=warn
EOF
    
    # Pre-warm Gradle daemon (if gradlew exists)
    if [ -f gradlew ]; then
        log "üî• Pre-warming Gradle daemon..."
        ./gradlew --version --no-daemon >/dev/null 2>&1 || true
    else
        log "üìù Gradlew not found, skipping daemon pre-warm"
    fi
    
    cd ..
    log "‚úÖ Gradle build optimization completed"
}

# Optimize iOS build
optimize_ios_build() {
    log "üçé Optimizing iOS build..."
    
    # Set Xcode optimization flags
    export XCODE_FAST_BUILD="${XCODE_FAST_BUILD:-true}"
    export COCOAPODS_FAST_INSTALL="${COCOAPODS_FAST_INSTALL:-true}"
    
    if [ "$XCODE_FAST_BUILD" = "true" ]; then
        # Optimize Xcode build settings
        defaults write com.apple.dt.Xcode BuildSystemScheduleInherentlyParallelCommandsExclusively -bool NO
        defaults write com.apple.dt.Xcode IDEBuildOperationMaxNumberOfConcurrentCompileTasks -int 6
        log "‚úÖ Xcode fast build enabled"
    fi
    
    if [ "$COCOAPODS_FAST_INSTALL" = "true" ]; then
        # Optimize CocoaPods
        export COCOAPODS_DISABLE_STATS=true
        export COCOAPODS_SKIP_CACHE=false
        log "‚úÖ CocoaPods fast install enabled"
    fi
    
    log "‚úÖ iOS build optimization completed"
}

# Optimize Flutter build
optimize_flutter_build() {
    log "üì± Optimizing Flutter build..."
    
    # Clear only necessary caches (without invalid --no-pub-get flag)
    flutter clean
    
    # Pre-download dependencies
    log "üì¶ Pre-downloading Flutter dependencies..."
    flutter pub get --offline 2>/dev/null || flutter pub get
    
    # Enable build cache
    export FLUTTER_BUILD_CACHE=true
    
    log "‚úÖ Flutter build optimization completed"
}

# Memory optimization
optimize_memory() {
    log "üß† Optimizing memory usage..."
    
    # Clear system caches
    sync 2>/dev/null || true
    echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || true
    
    # Monitor available memory
    if command -v free >/dev/null 2>&1; then
        local available_mem=$(free -m | awk 'NR==2{printf "%.0f", $7}')
        log "üìä Available memory: ${available_mem}MB"
        
        if [ "$available_mem" -lt 4000 ]; then
            log "‚ö†Ô∏è Low memory detected, performing aggressive cleanup..."
            # Force garbage collection
            java -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -Xmx1G -version 2>/dev/null || true
        fi
    fi
    
    log "‚úÖ Memory optimization completed"
}

# Network optimization
optimize_network() {
    log "üåê Optimizing network connections..."
    
    # Set optimal curl settings
    export CURL_CONNECT_TIMEOUT=30
    export CURL_MAX_TIME=300
    export CURL_RETRY_DELAY=5
    export CURL_MAX_RETRIES=3
    
    # Test network connectivity
    if curl --connect-timeout 10 --max-time 30 --silent --fail https://pub.dev >/dev/null 2>&1; then
        log "‚úÖ Network connectivity verified"
    else
        log "‚ö†Ô∏è Network connectivity issues detected"
    fi
    
    log "‚úÖ Network optimization completed"
}

# Main acceleration function
accelerate_build() {
    local platform="${1:-all}"
    
    log "üöÄ Starting build acceleration for $platform..."
    
    # Initialize acceleration
    init_build_acceleration
    
    # Optimize based on platform
    case "$platform" in
        "android"|"all")
            optimize_gradle_build
            optimize_flutter_build
            ;;
        "ios"|"all")
            optimize_ios_build
            optimize_flutter_build
            ;;
    esac
    
    # Common optimizations
    optimize_memory
    optimize_network
    
    log "‚úÖ Build acceleration completed for $platform"
}

# Export functions for use in other scripts
export -f init_build_acceleration
export -f download_assets_parallel
export -f optimize_gradle_build
export -f optimize_ios_build
export -f optimize_flutter_build
export -f optimize_memory
export -f optimize_network
export -f accelerate_build

# Run acceleration if script is called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    accelerate_build "${1:-all}"
fi 